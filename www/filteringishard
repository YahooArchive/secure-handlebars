
<!DOCTYPE html>
<html lang="en">
  <head>
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta http-equiv="content-type" content="text/html; charset=UTF-8"/>
    <title>Filtering is Hard!</title>
    <link rel="stylesheet" type="text/css" href="http://yui.yahooapis.com/3.13.0/build/cssbase/cssbase-min.css">
    <link rel="stylesheet" type="text/css" href="http://yui.yahooapis.com/3.13.0/build/cssreset/cssreset-min.css">
    <link rel="stylesheet" type="text/css" href="http://yui.yahooapis.com/3.13.0/build/cssfonts/cssfonts-min.css">
    <link rel="stylesheet" href="www/stylesheets/security.css" type="text/css" />

    <!-- Bootstrap -->
    <link href="www/stylesheets/bootstrap.min.css" rel="stylesheet">

    <!-- HTML5 Shim and Respond.js IE8 support of HTML5 elements and media queries -->
    <!-- WARNING: Respond.js doesn't work if you view the page via file:// -->

    <link href="www/stylesheets/blog.css" rel="stylesheet">
    <link href="www/stylesheets/carousel.css" rel="stylesheet">

    <!-- jquery -->
    <script src="www/javascripts/jquery.min.js"></script>

    <!-- HTML5 shim and Respond.js for IE8 support of HTML5 elements and media queries -->
    <!--[if lt IE 9]>
      <script src="https://oss.maxcdn.com/html5shiv/3.7.2/html5shiv.min.js"></script>
      <script src="https://oss.maxcdn.com/respond/1.4.2/respond.min.js"></script>
    <![endif]-->
  </head>

    <body>
    <div class="header">
      <h1 class="header-logo">
      </h1>
    </div>

        <div class="blog-masthead">
          <div class="container">
            <nav class="blog-nav">
              <a class="blog-nav-item " href="/">Safe JS Templating</a>
              <a class="blog-nav-item active" href="/safejstemplating">Getting Started</a>
              <a class="blog-nav-item " href="/demosContextParserHandlebars">Demos</a>
              <a class="blog-nav-item " href="/bugBounty">Bug Bounty</a>
            </nav>
          </div>
        </div>

    <div class="container">
      <!-- grid system: http://getbootstrap.com/css/#grid -->
      <div class="row">
        <div class="col-md-12 blog-main">
          <h2 class="header-badge">Filtering is Hard!</h2>
          <p class="text-center">Cross Site Scripting (a.k.a. XSS) is still ranked among Top 3 in the OWASP Top 10 for more than a decade, and why?</p>
        </div> <!-- blog main -->

        <div class="col-md-12 blog-post">&nbsp;&nbsp;</div>

        <div class="col-md-8 blog-post">
          <div class="col-md-12 blog-post">
            <h2>Filtering is hard!!!</h2>
            <p class="text-justify">Cross Site Scripting (a.k.a. XSS) has long been ranked among Top 3 in the OWASP Top 10 [1] for more than a decade. Web applications taking untrusted user inputs, keeping them intact without proper validations, and sending them back as part of the HTML are vulnerable to XSS. Attackers can execute arbitrary JavaScript in the vulnerable application, deface the website, and even steal users’ sessions and personal information. Given these severe consequences, XSS is unarguably a critical vulnerability.</p>

            <p class="text-justify">Nevertheless, why is XSS still being ranked among consistently high in OWASP Top 10? As a matter of fact, context-aware output filtering, as the most effective mitigation approach is hard to apply manually. In this article, we further elaborate the difficulty, and how we tackle this problem when designing XSS filters and <a href="https://github.com/yahoo/secure-handlebars">automated solutions</a>.</p>
          </div><!-- blog-post -->

          <div class="col-md-12 blog-post">
            <h2>Input Validation v.s. Output Filtering</h2>
            <p class="text-justify">User input validation is implemented at the server-side, often as the first interface to validate all inputs before further processing; whereas output filtering is implemented as the last component at the output, right before the data is sent back to user’s browsers. There is is no conflicting reason of just doing the filtering mechanism in one place, since it depends on the use case and functionality of your web applications. Taking search application as an example, it is impractical to implement the user input validation since the application needs to capture what exactly the user input to conduct the search functionality. Indispensably, user input validation is still the most universal mechanism for validation/filtering strategy for most web applications.</p>

             <p class="text-justify">However, why does input filtering fail in most cases? It is because the first interfacing component of the system can never anticipate what system component comes next when we are developing the modern web applications at scale with different internal and external systems interacting with each other. As a consequence, input filtering can either be over-filtering or insufficient filtering, the first case definitely affects the normal functionality while the latter case can lead to XSS vulnerabilities. This scenario makes output filtering more suitable and effective in the validation/filtering strategy, as it is the last component of the web application returning data back to the user’s browser. Nowadays, the industry is shifting to the output filtering in most of templating engines as it is effective than input filtering.</p>
          </div><!-- blog-post -->

          <div class="col-md-12 blog-post">
            <h2>Output Contexts</h2>
            <p class="text-justify">With the output filtering strategy in the design, it is still not easy to stop the XSS, as the developers need to understand the output contexts of the web applications and the execution order of the contexts in the web browsers. Taking a HTML5 web application as an example, there are at least 4 superset classifications of output contexts, including HTML, CSS, JavaScript and URI, and each output context can be further broken down to finer granularity for classification. Based on our study, we have at least 25 output contexts if we just consider HTML and URI together, it means that we need at least 25 different types of filtering rules in practice.</p>

            <p class="text-justify">Besides the number of combinations of different output contexts, the filtering order is also critical to the filtering mechanism. The filtering order must be the same as the execution order of the contexts being invoked by the web browser and with the blacklist filter at the end of the filtering rules. When the developer puts the untrusted user input at the “href” attribute value of the anchor tag, the correct order is to apply the URI validation before the HTML attribute value filtering and with the HTTP protocol blacklist filter at the end to make it secure.</p>
          </div><!-- blog-post -->
       
          <div class="col-md-12 blog-post">
            <h2>XSS Filters</h2>
            <p class="text-justify"><a herf="http://github.com/yahoo/xss-filters">XSS-Filters</a> is the context-aware output filters for web applications. The design principle is to apply the filtering rules based on the output contexts in order to achieve the goal of “Just sufficient filtering”. This design principle is to address over-filtering and insufficient filtering through context awareness in the output, in order to provide a developer friendly and secure solution to web applications.</p>

            <p class="text-justify">In our solution, we provide a set of self-explanatory API(s) by chaining up the context-aware filters based on the most common developer use cases without the pain of understanding the browser execution context order and what contexts being invoked. If you want to apply our filters, you can check out this tutorial on how to apply the context-aware filters manually or our advanced automation solution provided.</p>
          </div>
        </div><!-- col-md-8 blog-post -->

        <div class="col-md-3 col-md-offset-1 blog-sidebar">
          <div class="sidebar-module sidebar-module-inset">
          <h4>What's OWASP</h4>
          <p>The Open Web Application Security Project (OWASP) is a <a href="http://www.irs.gov/Charities-&-Non-Profits/Charitable-Organizations/Exemption-Requirements-Section-501(c)(3)-Organizations">501(c)(3)</a> worldwide not-for-profit charitable organization focused on improving the security of software. </p>
          </div>

          <div class="sidebar-module">
            <h4>Quick Links</h4>
            <ol class="list-unstyled">
              <li><a href="/getstart">Getting Started</a></li>
            </ol>

            <h4>Source Code</h4>
            <ol class="list-unstyled">
              <li><a href="https://github.com/yahoo/xss-filters">XSS Filters</a></li>
              <li><a href="https://github.com/yahoo/context-parser">Context Parser</a></li>
              <li><a href="https://github.com/yahoo/secure-handlebars">Secure Handlebars</a></li>
              <li><a href="https://github.com/yahoo/secure-handlebars-helpers">Secure Handlebars Helpers</a></li>
              <li><a href="https://github.com/yahoo/express-secure-handlebars">Express Secure Handlebars</a></li>
            </ol>

            <h4>References</h4>
            <ol class="list-unstyled">
            <li><a href="https://www.owasp.org/index.php/Main_Page">OWASP</a></li>
            </ol>

            <h4>Related Articles</h4>
            <ol class="list-unstyled">
              <li><a href="/filteringishard">Filtering is Hard!</a></li>
              <li><a href="/autoescaping">What is Auto Escaping?</a></li>
              <li><a href="/contextparser">Our Context Parser</a></li>
            </ol>
          </div>

          <a class="back-to-top" href="#top">
          Back to top
          </a>
        </div><!-- col-md-3 col-md-offset-1 blog-sidebar-->

        <div class="col-md-12 blog-post">
          <div class="security-cta">
            <form action="/autoescaping" method="get">
              <button type="submit">Continue</button>
            </form>
          </div>
          <p class="text-center"><a href="/">Back</a></p>
        </div> <!-- blog post -->     

      </div><!-- row -->
    </div><!-- container -->

    <div class="footer">
    <a href="http://info.yahoo.com/privacy/us/yahoo/" target="_blank">Privacy</a> |
    <a href="http://info.yahoo.com/legal/us/yahoo/utos/en-us/" target="_blank">Legal</a>
    </div>
        <!-- Bootstrap core JavaScript
        ================================================== -->
        <!-- Placed at the end of the document so the pages load faster -->
        <!-- jQuery (necessary for Bootstrap's JavaScript plugins) -->
        <script src="www/javascripts/jquery.min.js"></script>
        <!-- Include all compiled plugins (below), or include individual files as needed -->
        <script src="www/javascripts/bootstrap.min.js"></script>
    
        <script src="www/javascripts/docs.min.js"></script>
        <!-- IE10 viewport hack for Surface/desktop Windows 8 bug -->
        <script src="www/javascripts/ie10-viewport-bug-workaround.js"></script>
    
      </body>
    </html>

